(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{498:function(s,t,a){"use strict";a.r(t);var n=a(25),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),t("p",[s._v("Strings are probably the most basic data type\nin all languages, yet they hold a very important\nvalue in ABS: considering that shell scripting\nis all about working around command outputs,\nwe assume you will likely work a lot with them.")]),s._v(" "),t("p",[s._v("Strings are enclosed by double or single quotes:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello world'")]),s._v("\n")])])]),t("p",[s._v("You can escape quotes with a simple backslash:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I said: '),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("hello world"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v("\n")])])]),t("p",[s._v("or use the other quote to ease escaping:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I said: \"hello world\"'")]),s._v("\n")])])]),t("p",[s._v("Their individual characters can be accessed\nwith the index notation:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# e")]),s._v("\n")])])]),t("p",[s._v("Accessing an index that does not exist returns an empty string.")]),s._v(" "),t("p",[s._v("You can access the Nth last character of the string using a\nnegative index:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "n"')]),s._v("\n")])])]),t("p",[s._v("You can also access a range of the string with the "),t("code",[s._v("[start:end]")]),s._v(" notation:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" // "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v("\n")])])]),t("p",[s._v("where "),t("code",[s._v("start")]),s._v(" is the starting position in the array, and "),t("code",[s._v("end")]),s._v(" is\nthe ending one. If "),t("code",[s._v("start")]),s._v(" is not specified, it is assumed to be 0,\nand if "),t("code",[s._v("end")]),s._v(" is omitted it is assumed to be the last character in the\nstring:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" // "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" // "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tring"')]),s._v("\n")])])]),t("p",[s._v("If "),t("code",[s._v("end")]),s._v(" is negative, it will be converted to "),t("code",[s._v("length of string - (-end)")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":-1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" // "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"strin"')]),s._v("\n")])])]),t("p",[s._v('To concatenate strings, "sum" them:')]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "hello world"')]),s._v("\n")])])]),t("p",[s._v('Note that strings have what we call a "zero value":\na value that evaluates to '),t("code",[s._v("false")]),s._v(" when casted to boolean:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),t("p",[s._v("To test for the existence of substrings within strings use the "),t("code",[s._v("in")]),s._v(" operator:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xyz"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),t("h2",{attrs:{id:"interpolation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interpolation"}},[s._v("#")]),s._v(" Interpolation")]),s._v(" "),t("p",[s._v("You can also replace parts of the string with variables\ndeclared within your program using the "),t("code",[s._v("$")]),s._v(" symbol:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/hosts"')]),s._v("\nx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File name is: '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v('"')]),s._v("\necho"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "File name is: /etc/hosts"')]),s._v("\n")])])]),t("p",[s._v("If you need "),t("code",[s._v("$")]),s._v(" literals in your command, you\nsimply need to escape them with a "),t("code",[s._v("\\")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$non_existing_var")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# \"\" since the ABS variable 'non_existing_var' doesn't exist")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$non_existing_var")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "$non_existing_var"')]),s._v("\n")])])]),t("p",[s._v("An alternative syntax ("),t("code",[s._v("${...}")]),s._v(") is available for special\ncases -- for example, when your string is embedded\nwithin another string:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("word "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"word"')]),s._v("\necho"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"prefix'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$wordsuffix")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "prefix"')]),s._v("\necho"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"prefix'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${word}")]),s._v('suffix"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "prefixwordsuffix"')]),s._v("\n")])])]),t("h2",{attrs:{id:"special-characters-embedded-in-strings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#special-characters-embedded-in-strings"}},[s._v("#")]),s._v(" Special characters embedded in strings")]),s._v(" "),t("p",[s._v("Double and single quoted strings behave differently if the string contains\nescaped special ASCII line control characters such as "),t("code",[s._v('LF "\\n"')]),s._v(", "),t("code",[s._v('CR "\\r"')]),s._v(",\nand "),t("code",[s._v('TAB "\\t"')]),s._v(".")]),s._v(" "),t("p",[s._v("If the string is double quoted these characters will be expanded to their ASCII codes.\nOn the other hand, if the string is single quoted, these characters will be considered\nas escaped literals.")]),s._v(" "),t("p",[s._v("This means, for example, that double quoted LFs will cause line feeds to appear in the output:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na\nb\nc\n⧐\n")])])]),t("p",[s._v("Conversely, single quoted LFs will appear as escaped literal strings:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a\\nb\\nc'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nc\n⧐\n")])])]),t("p",[s._v("And if you need to mix escaped and unescaped special characters, then you can do this with double escapes within double quoted strings:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v("nb"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nb\nc\n⧐\n")])])]),t("h2",{attrs:{id:"unicode-support"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unicode-support"}},[s._v("#")]),s._v(" Unicode support")]),s._v(" "),t("p",[s._v("Unicode characters are supported in strings:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"⺐"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⺐\n⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I ❤ ABS"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nI ❤ ABS\n")])])]),t("h3",{attrs:{id:"working-with-special-characters-in-string-functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#working-with-special-characters-in-string-functions"}},[s._v("#")]),s._v(" Working with special characters in string functions")]),s._v(" "),t("p",[s._v("Special characters also work with "),t("code",[s._v("split()")]),s._v(" and "),t("code",[s._v("join()")]),s._v(" and other string functions as well.")]),s._v(" "),t("ol",[t("li",[s._v("Double quoted expanded special characters:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("⧐  s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('c"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a, b, c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n⧐  ss "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" join"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s, "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ss"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na\nb\nc\n⧐\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("Single quoted literal special characters:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("⧐  s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a\\nb\\nc'")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a, b, c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n⧐  ss "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" join"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s, "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ss"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nc\n⧐\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("Double quoted, double escaped special characters:")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("⧐  s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v("nb"),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('nc"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a, b, c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n⧐  ss "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" join"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s, "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('n"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ss"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nb"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nc\n⧐\n")])])]),t("h2",{attrs:{id:"supported-functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#supported-functions"}},[s._v("#")]),s._v(" Supported functions")]),s._v(" "),t("h3",{attrs:{id:"any-str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#any-str"}},[s._v("#")]),s._v(" any(str)")]),s._v(" "),t("p",[s._v("Checks whether any of the characters in "),t("code",[s._v("str")]),s._v(" are present in the string:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".any"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abs"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".any"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xyz"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),t("h3",{attrs:{id:"camel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#camel"}},[s._v("#")]),s._v(" camel()")]),s._v(" "),t("p",[s._v("Converts the string to camelCase:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a short sentence"')]),s._v(".camel"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# aShortSentence")]),s._v("\n")])])]),t("h3",{attrs:{id:"ceil"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ceil"}},[s._v("#")]),s._v(" ceil()")]),s._v(" "),t("p",[s._v("Converts a string to a number, and then rounds the\nnumber up to the closest integer.")]),s._v(" "),t("p",[s._v("The string must represent a number.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.3"')]),s._v(".ceil"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-10.3"')]),s._v(".ceil"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".ceil"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: ceil(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),t("h3",{attrs:{id:"floor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#floor"}},[s._v("#")]),s._v(" floor()")]),s._v(" "),t("p",[s._v("Converts a string to a number, and then rounds the\nnumber down to the closest integer.")]),s._v(" "),t("p",[s._v("The string must represent a number.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.9"')]),s._v(".floor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-10.9"')]),s._v(".floor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".floor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: floor(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),t("h3",{attrs:{id:"fmt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fmt"}},[s._v("#")]),s._v(" fmt()")]),s._v(" "),t("p",[s._v("Formats a string ("),t("a",{attrs:{href:"https://linux.die.net/man/3/sprintf",target:"_blank",rel:"noopener noreferrer"}},[s._v("sprintf convention"),t("OutboundLink")],1),s._v("):")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello %s"')]),s._v(".fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "hello world"')]),s._v("\n")])])]),t("p",[s._v("In order to print a literal "),t("code",[s._v("%")]),s._v(", you can simply escape it with another "),t("code",[s._v("%%")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"30%%"')]),s._v(".fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 30%")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"30%% %s"')]),s._v(".fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"higher"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 30% higher")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"30%"')]),s._v(".fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 30%!(NOVERB)")]),s._v("\n")])])]),t("h3",{attrs:{id:"index-str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#index-str"}},[s._v("#")]),s._v(" index(str)")]),s._v(" "),t("p",[s._v("Returns the first index at which "),t("code",[s._v("str")]),s._v(" is found:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ri"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2")]),s._v("\n")])])]),t("h3",{attrs:{id:"int"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[s._v("#")]),s._v(" int()")]),s._v(" "),t("p",[s._v("Converts a string to a number, and then rounds it\ntowards zero to the closest integer.\nThe string must represent a number.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"99.5"')]),s._v(".int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-99.5"')]),s._v(".int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -99")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".int"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: int(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),t("h3",{attrs:{id:"is-number"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#is-number"}},[s._v("#")]),s._v(" is_number()")]),s._v(" "),t("p",[s._v("Checks whether a string can be converted to a number:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"99.5"')]),s._v(".is_number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".is_number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),t("p",[s._v("Use this function when "),t("code",[s._v('"...".number()')]),s._v(" might return an error.")]),s._v(" "),t("h3",{attrs:{id:"json"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[s._v("#")]),s._v(" json()")]),s._v(" "),t("p",[s._v("Parses the string as JSON, returning a "),t("a",{attrs:{href:"/types/hash"}},[s._v("hash")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("⧐  s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{"a": 1, "b": "string", "c": true, "d": {"x": 10, "y": 20}}\'')]),s._v("\n⧐  h "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s.json"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  h\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("a: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", b: string, c: true, d: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(", y: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n⧐  h.d\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(", y: "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("h3",{attrs:{id:"kebab"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kebab"}},[s._v("#")]),s._v(" kebab()")]),s._v(" "),t("p",[s._v("Converts the string to kebab-case:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a short sentence"')]),s._v(".kebab"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a-short-sentence")]),s._v("\n")])])]),t("h3",{attrs:{id:"last-index-str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-index-str"}},[s._v("#")]),s._v(" last_index(str)")]),s._v(" "),t("p",[s._v("Returns the last index at which "),t("code",[s._v("str")]),s._v(" is found:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string string"')]),s._v(".last_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"g"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 13")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string string"')]),s._v(".last_index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ri"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 9")]),s._v("\n")])])]),t("h3",{attrs:{id:"len"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#len"}},[s._v("#")]),s._v(" len()")]),s._v(" "),t("p",[s._v("Returns the length of a string:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v(".len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 11")]),s._v("\n")])])]),t("h3",{attrs:{id:"lines"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lines"}},[s._v("#")]),s._v(" lines()")]),s._v(" "),t("p",[s._v("Splits a string by newline:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('second"')]),s._v(".lines"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ["first", "second"]')]),s._v("\n")])])]),t("h3",{attrs:{id:"lower"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lower"}},[s._v("#")]),s._v(" lower()")]),s._v(" "),t("p",[s._v("Lowercases the string:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"STRING"')]),s._v(".lower"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "string"')]),s._v("\n")])])]),t("h3",{attrs:{id:"number"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[s._v("#")]),s._v(" number()")]),s._v(" "),t("p",[s._v("Converts a string to a number, if possible:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"99.5"')]),s._v(".number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 99.5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".number"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: int(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),t("h3",{attrs:{id:"prefix-str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prefix-str"}},[s._v("#")]),s._v(" prefix(str)")]),s._v(" "),t("p",[s._v("Checks whether the string starts with "),t("code",[s._v("str")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".prefix"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".prefix"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),t("h3",{attrs:{id:"repeat-i"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#repeat-i"}},[s._v("#")]),s._v(" repeat(i)")]),s._v(" "),t("p",[s._v("Creates a new string by repeating the original one "),t("code",[s._v("i")]),s._v(" times:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".repeat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "stringstring"')]),s._v("\n")])])]),t("h3",{attrs:{id:"replace-str1-str2-n"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replace-str1-str2-n"}},[s._v("#")]),s._v(" replace(str1, str2 [, n])")]),s._v(" "),t("p",[s._v("Replaces the first "),t("code",[s._v("n")]),s._v(" occurrences of "),t("code",[s._v("str1")]),s._v(" in the string with "),t("code",[s._v("str2")]),s._v(".\nIf "),t("code",[s._v("n")]),s._v(" is omitted or negative, it will replace all occurrences:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".replace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"o"')]),s._v(", -1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "strong"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaaa"')]),s._v(".replace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "xxxx"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaaa"')]),s._v(".replace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "xxaa"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A man, a plan, a canal, Panama!"')]),s._v(".replace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a "')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ur-"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "A man, ur-plan, ur-canal, Panama!"')]),s._v("\n")])])]),t("h3",{attrs:{id:"reverse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[s._v("#")]),s._v(" reverse()")]),s._v(" "),t("p",[s._v("Returns a new string with the order of characters/glyphs reversed from the\nsource.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v(".reverse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "dlrow olleh"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"世界"')]),s._v(".reverse"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "界世"')]),s._v("\n")])])]),t("h3",{attrs:{id:"round-precision"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#round-precision"}},[s._v("#")]),s._v(" round(precision?)")]),s._v(" "),t("p",[s._v("Converts a string to a number, and then rounds\nthe number with the given precision.")]),s._v(" "),t("p",[s._v("The precision argument is optional, and set to "),t("code",[s._v("0")]),s._v("\nby default.")]),s._v(" "),t("p",[s._v("The string must represent a number.")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.3"')]),s._v(".round"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.6"')]),s._v(".round"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.333"')]),s._v(".round"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 10.3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".round"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: round(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),t("p",[s._v("You can also replace an array of strings:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".replace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"g"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"o"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "strono"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A man, a plan, a canal, Panama!"')]),s._v(".replace"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a "')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"l"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ur-"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "A man, ur-pur-an, ur-canaur-, Panama!"')]),s._v("\n")])])]),t("h3",{attrs:{id:"snake"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#snake"}},[s._v("#")]),s._v(" snake()")]),s._v(" "),t("p",[s._v("Converts the string to snake_case:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a short sentence"')]),s._v(".snake"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a_short_sentence")]),s._v("\n")])])]),t("h3",{attrs:{id:"split-separator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#split-separator"}},[s._v("#")]),s._v(" split(separator)")]),s._v(" "),t("p",[s._v("Splits a string by "),t("code",[s._v("separator")]),s._v(". If the separator is not provided, it defaults\nto a "),t("a",{attrs:{href:"https://pkg.go.dev/unicode#IsSpace",target:"_blank",rel:"noopener noreferrer"}},[s._v("unicode whitespace"),t("OutboundLink")],1),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.2.3.4"')]),s._v(".split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ["1", "2", "3", "4"]')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1 2 3 4"')]),s._v(".split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ["1", "2", "3", "4"]')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('world!"')]),s._v(".split"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ["Hello", "world!"]')]),s._v("\n")])])]),t("h3",{attrs:{id:"str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#str"}},[s._v("#")]),s._v(" str()")]),s._v(" "),t("p",[s._v("Identity:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "string"')]),s._v("\n")])])]),t("h3",{attrs:{id:"suffix-str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#suffix-str"}},[s._v("#")]),s._v(" suffix(str)")]),s._v(" "),t("p",[s._v("Checks whether the string ends with "),t("code",[s._v("str")]),s._v(":")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".suffix"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".suffix"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ong"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),t("h3",{attrs:{id:"title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#title"}},[s._v("#")]),s._v(" title()")]),s._v(" "),t("p",[s._v("Titlecases the string:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v(".title"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "Hello World"')]),s._v("\n")])])]),t("h3",{attrs:{id:"trim"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trim"}},[s._v("#")]),s._v(" trim()")]),s._v(" "),t("p",[s._v("Removes empty spaces from the beginning and end of the string:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" string     "')]),s._v(".trim"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "string"')]),s._v("\n")])])]),t("h3",{attrs:{id:"trim-by-str"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trim-by-str"}},[s._v("#")]),s._v(" trim_by(str)")]),s._v(" "),t("p",[s._v("Removes "),t("code",[s._v("str")]),s._v(" from the beginning and end of the string:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".trim_by"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"g"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "strin"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"stringest"')]),s._v(".trim_by"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"st"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "ringe"')]),s._v("\n")])])]),t("h3",{attrs:{id:"upper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#upper"}},[s._v("#")]),s._v(" upper()")]),s._v(" "),t("p",[s._v("Uppercases the string:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".upper"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "STRING"')]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);
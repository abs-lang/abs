(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{488:function(t,e,s){"use strict";s.r(e);var a=s(25),n=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"defer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#defer"}},[t._v("#")]),t._v(" Defer "),e("Badge",{attrs:{text:"experimental",type:"warning"}})],1),t._v(" "),e("p",[t._v("Sometimes it is very helpful to guarantee a certain function is executed\nregardless of what code path we take: you can use the "),e("code",[t._v("defer")]),t._v(" keyword for\nthis.")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("echo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndefer echo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\necho"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n")])])]),e("p",[t._v("When you schedule a function to be deferred, it will executed right at\nthe end of the current scope. A "),e("code",[t._v("defer")]),t._v(" inside a function will then\nexecute at the end of that function itself:")]),t._v(" "),e("div",{staticClass:"language-py extra-class"},[e("pre",{pre:!0,attrs:{class:"language-py"}},[e("code",[t._v("echo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nf fn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    defer echo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    echo"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\necho"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 4")]),t._v("\n")])])]),e("p",[t._v("You can "),e("code",[t._v("defer")]),t._v(" any callable: a function call, a method or even a system\ncommand. This can be very helpful if you need to run a cleanup function\nright before wrapping up with your code:")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("defer "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" my-file.txt"),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some text"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my-file.txt"')]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"some other text"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"my-file.txt"')]),t._v("\n")])])]),e("p",[t._v("In this case, you will be guaranteed to execute the command that removes\n"),e("code",[t._v("my-file.txt")]),t._v(" before the program closes.")]),t._v(" "),e("p",[t._v("Be aware that code that is deferred does not have access to the return value\nof its scope, and will supress errors -- if a "),e("code",[t._v("defer")]),t._v(" block messes up you're\nnot going to see any error. This behavior is experimental, but we would most\nlikely like to give this kind of control through "),e("a",{attrs:{href:"https://github.com/abs-lang/abs/issues/118",target:"_blank",rel:"noopener noreferrer"}},[t._v("try...catch...finally"),e("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);e.default=n.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{529:function(a,t,s){"use strict";s.r(t);var e=s(45),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"system-shell-commands"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#system-shell-commands"}},[a._v("#")]),a._v(" System (shell) commands")]),a._v(" "),s("p",[a._v("Executing system commands is one of the most important features\nof ABS, as it allows mixing the convenience of the shell with\nthe syntax of a modern programming language.")]),a._v(" "),s("p",[a._v("Commands are executed with the "),s("code",[a._v("`command`")]),a._v(" syntax,\nwhich resemble Bash's syntax to execute commands in a subshell:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("date")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("date")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# "Sun Apr 1 04:30:59 +01 1995"')]),a._v("\n")])])]),s("p",[a._v("As you can see, the return value of a command is a simple\nstring -- the output of the program. If the program was to\nencounter an error, the same string would hold the error\nmessage:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("date")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),a._v("dat"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# "bash: dat: command not found"')]),a._v("\n")])])]),s("p",[a._v("It would be fairly painful to have to parse strings\nmanually to understand if a command executed without errors;\nin ABS, the returned string has a special property "),s("code",[a._v("ok")]),a._v(" that\nchecks whether the command was successful:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("ls -la")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("ok "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("echo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"executing-commands-in-background"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executing-commands-in-background"}},[a._v("#")]),a._v(" Executing commands in background")]),a._v(" "),s("p",[a._v("Sometimes you might want to execute a command in\nbackground, so that the script keeps executing\nwhile the command is running. In order to do so,\nyou can simply add an "),s("code",[a._v("&")]),a._v(" at the end of your script:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\necho"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This will be printed right away!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v('You might also want to check whether a command\nis "done", by checking the boolean '),s("code",[a._v(".done")]),a._v(" property:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("cmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\ncmd.done "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\ncmd.done "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# true")]),a._v("\n")])])]),s("p",[a._v("If, at some point, you want to wait for the command\nto finish before running additional code, you can\nuse the "),s("code",[a._v("wait")]),a._v(" method:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("cmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\necho"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This will be printed right away!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ncmd.wait"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\necho"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"This will be printed after 10s"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("If you ever want to terminate a running command, you can\nuse the "),s("code",[a._v("kill")]),a._v(" method.")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("cmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\ncmd.done "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# false")]),a._v("\ncmd.kill"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\ncmd.done "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# true")]),a._v("\n")])])]),s("p",[a._v("Also note that when an "),s("code",[a._v("exec()")]),a._v(" command string terminates with an "),s("code",[a._v("&")]),a._v(",\nthe "),s("code",[a._v("exec(command)")]),a._v(" function will terminate immediately after launching\nthe command which will run independently in the background.\nThis means that the command must either terminate on its own or be killed\nusing "),s("code",[a._v("pkill")]),a._v(" or similar. This way an ABS script can launch a true daemon\nprocess that may operate on its own outside of ABS. For example you can\nreboot a remote computer via ssh without interacting with it:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("exec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("\"ssh user@host.local 'sudo reboot' &\"")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h2",{attrs:{id:"interpolation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interpolation"}},[a._v("#")]),a._v(" Interpolation")]),a._v(" "),s("p",[a._v("You can also replace parts of the command with variables\ndeclared within your program using the "),s("code",[a._v("$")]),a._v(" symbol:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("file")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"cpuinfo"')]),a._v("\nx "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" /proc/$file"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v("\necho"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# processor: 0\\nvendor_id: GenuineIntel...")]),a._v("\n")])])]),s("p",[a._v("or interpolation within an "),s("code",[a._v("exec(command)")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("cmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nfilename "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nexec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sudo '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$cmd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$filename")]),a._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("and if you need "),s("code",[a._v("$")]),a._v(" literals in your command, you\nsimply need to escape them with a "),s("code",[a._v("\\")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# "" since the ABS variable PWD doesn\'t exist')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$PWD")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v('# "/go/src/github.com/abs-lang/abs"')]),a._v("\n")])])]),s("h2",{attrs:{id:"using-a-different-shell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-a-different-shell"}},[a._v("#")]),a._v(" Using a different shell")]),a._v(" "),s("p",[a._v("By default, ABS uses "),s("code",[a._v("bash -c")]),a._v(" to execute commands; on Windows\nit instead uses "),s("code",[a._v("cmd.exe /C")]),a._v(".")]),a._v(" "),s("p",[a._v("You can specify which shell to use by setting the environment\nvariable "),s("code",[a._v("ABS_COMMAND_EXECUTOR")]),a._v(":")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$0"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# bash")]),a._v("\nenv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ABS_COMMAND_EXECUTOR"')]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sh -c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("$0"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("`")])]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# sh")]),a._v("\n")])])]),s("h2",{attrs:{id:"alternative-syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#alternative-syntax"}},[a._v("#")]),a._v(" Alternative $() syntax")]),a._v(" "),s("p",[a._v("Even though the use of backticks is the standard recommended\nway to run system commands, for the ease of embedding ABS also\nallows you to use the "),s("code",[a._v("$(command)")]),a._v(" syntax:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('$(basename $(dirname "/tmp/make/life/easy")) // "easy"\n')])])]),s("p",[a._v("Commands that use the "),s("code",[a._v("$()")]),a._v(" syntax need to be\non their own line, meaning that you will not\nbe able to have additional code on the same line.\nThis will throw an error:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sleep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("h2",{attrs:{id:"executing-commands-without-capturing-i-o"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executing-commands-without-capturing-i-o"}},[a._v("#")]),a._v(" Executing commands without capturing I/O")]),a._v(" "),s("p",[a._v("It is also possible to execute a shell command without capturing its\ninput or output using the "),s("code",[a._v("exec(command)")]),a._v(" function. This allows long running\nor interactive programs to be run using the terminal's Standard IO\n(stdin, stdout, stderr). For example:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("exec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"sudo visudo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])]),s("p",[a._v("would open the default text editor in super user mode on the /etc/sudoers file.")]),a._v(" "),s("p",[a._v("Unlike the normal backtick command execution syntax above,\nthe "),s("code",[a._v("exec(command)")]),a._v(" function call does not return a result string unless it fails.\nTherefore, the "),s("code",[a._v("exec(command)")]),a._v(" may be the last command executed in a script\nfile leaving the executed command in charge of the terminal IO until it\nterminates.")]),a._v(" "),s("p",[a._v("For example, an ABS script might be used to marshall the command line args\nfor an interactive program such as the nano editor:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("cat")]),a._v(" abs/tests/test-exec.abs\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# marshall the args for the nano editor")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# if the filename is not given in the args, prompt for it")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# if the file is located outside the user's home dir, invoke sudo nano filename")]),a._v("\n\ncmd "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'nano'")]),a._v("\nfilename "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\nhomedir "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"HOME"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("while")]),a._v(" filename "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("''")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Please enter file name for %s: "')]),a._v(", cmd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    filename "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" stdin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" filename.prefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'~/'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" filename.prefix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("homedir"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("''")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'sudo'")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# execute the command with live stdIO")]),a._v("\nexec"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$cmd")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$filename")]),a._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);
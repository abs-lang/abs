(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{537:function(s,t,a){"use strict";a.r(t);var n=a(45),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),a("p",[s._v("Strings are probably the most basic data type\nin all languages, yet they hold a very important\nvalue in ABS: considering that shell scripting\nis all about working around command outputs,\nwe assume you will likely work a lot with them.")]),s._v(" "),a("p",[s._v("Strings are enclosed by double or single quotes:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello world'")]),s._v("\n")])])]),a("p",[s._v("You can escape quotes with a simple backslash:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I said: '),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("hello world"),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v("\n")])])]),a("p",[s._v("or use the other quote to ease escaping:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I said: \"hello world\"'")]),s._v("\n")])])]),a("p",[s._v("Their individual characters can be accessed\nwith the index notation:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# e")]),s._v("\n")])])]),a("p",[s._v("Accessing an index that does not exist returns an empty string.")]),s._v(" "),a("p",[s._v("You can access the Nth last character of the string using a\nnegative index:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "n"')]),s._v("\n")])])]),a("p",[s._v("You can also access a range of the string with the "),a("code",[s._v("[start:end]")]),s._v(" notation:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v("\n")])])]),a("p",[s._v("where "),a("code",[s._v("start")]),s._v(" is the starting position in the array, and "),a("code",[s._v("end")]),s._v(" is\nthe ending one. If "),a("code",[s._v("start")]),s._v(" is not specified, it is assumed to be 0,\nand if "),a("code",[s._v("end")]),s._v(" is omitted it is assumed to be the last character in the\nstring:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tring"')]),s._v("\n")])])]),a("p",[s._v("If "),a("code",[s._v("end")]),s._v(" is negative, it will be converted to "),a("code",[s._v("length of string - (-end)")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" // "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"strin"')]),s._v("\n")])])]),a("p",[s._v('To concatenate strings, "sum" them:')]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),s._v(" + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" + "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "hello world"')]),s._v("\n")])])]),a("p",[s._v('Note that strings have what we call a "zero value":\na value that evaluates to '),a("code",[s._v("false")]),s._v(" when casted to boolean:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),a("p",[s._v("To test for the existence of substrings within strings use the "),a("code",[s._v("in")]),s._v(" operator:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xyz"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),a("h2",{attrs:{id:"interpolation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interpolation"}},[s._v("#")]),s._v(" Interpolation")]),s._v(" "),a("p",[s._v("You can also replace parts of the string with variables\ndeclared within your program using the "),a("code",[s._v("$")]),s._v(" symbol:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/hosts"')]),s._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"File name is: '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$file")]),s._v('"')]),s._v("\necho"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "File name is: /etc/hosts"')]),s._v("\n")])])]),a("p",[s._v("If you need "),a("code",[s._v("$")]),s._v(" literals in your command, you\nsimply need to escape them with a "),a("code",[s._v("\\")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$non_existing_var")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# \"\" since the ABS variable 'non_existing_var' doesn't exist")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$non_existing_var")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "$non_existing_var"')]),s._v("\n")])])]),a("p",[s._v("An alternative syntax ("),a("code",[s._v("${...}")]),s._v(") is available for special\ncases -- for example, when your string is embedded\nwithin another string:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("word "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"word"')]),s._v("\necho"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"prefix'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$wordsuffix")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "prefix"')]),s._v("\necho"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"prefix'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${word}")]),s._v('suffix"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "prefixwordsuffix"')]),s._v("\n")])])]),a("h2",{attrs:{id:"special-characters-embedded-in-strings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#special-characters-embedded-in-strings"}},[s._v("#")]),s._v(" Special characters embedded in strings")]),s._v(" "),a("p",[s._v("Double and single quoted strings behave differently if the string contains\nescaped special ASCII line control characters such as "),a("code",[s._v('LF "\\n"')]),s._v(", "),a("code",[s._v('CR "\\r"')]),s._v(",\nand "),a("code",[s._v('TAB "\\t"')]),s._v(".")]),s._v(" "),a("p",[s._v("If the string is double quoted these characters will be expanded to their ASCII codes.\nOn the other hand, if the string is single quoted, these characters will be considered\nas escaped literals.")]),s._v(" "),a("p",[s._v("This means, for example, that double quoted LFs will cause line feeds to appear in the output:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na\nb\nc\n⧐\n")])])]),a("p",[s._v("Conversely, single quoted LFs will appear as escaped literal strings:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nc\n⧐\n")])])]),a("p",[s._v("And if you need to mix escaped and unescaped special characters, then you can do this with double escapes within double quoted strings:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v("nb"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nb\nc\n⧐\n")])])]),a("h2",{attrs:{id:"unicode-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unicode-support"}},[s._v("#")]),s._v(" Unicode support")]),s._v(" "),a("p",[s._v("Unicode characters are supported in strings:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"⺐"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⺐\n⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I ❤ ABS"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nI ❤ ABS\n")])])]),a("h3",{attrs:{id:"working-with-special-characters-in-string-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#working-with-special-characters-in-string-functions"}},[s._v("#")]),s._v(" Working with special characters in string functions")]),s._v(" "),a("p",[s._v("Special characters also work with "),a("code",[s._v("split()")]),s._v(" and "),a("code",[s._v("join()")]),s._v(" and other string functions as well.")]),s._v(" "),a("ol",[a("li",[s._v("Double quoted expanded special characters:")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("⧐  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('c"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a, b, c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n⧐  ss "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na\nb\nc\n⧐\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("Single quoted literal special characters:")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("⧐  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("c'")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a, b, c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n⧐  ss "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nc\n⧐\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("Double quoted, double escaped special characters:")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("⧐  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v("nb"),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('nc"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("a, b, c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n⧐  ss "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" join"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s, "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  echo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("nc\n⧐\n")])])]),a("h2",{attrs:{id:"supported-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#supported-functions"}},[s._v("#")]),s._v(" Supported functions")]),s._v(" "),a("h3",{attrs:{id:"any-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#any-str"}},[s._v("#")]),s._v(" any(str)")]),s._v(" "),a("p",[s._v("Checks whether any of the characters in "),a("code",[s._v("str")]),s._v(" are present in the string:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abs"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".any"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xyz"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),a("h3",{attrs:{id:"camel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#camel"}},[s._v("#")]),s._v(" camel()")]),s._v(" "),a("p",[s._v("Converts the string to camelCase:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a short sentence"')]),s._v(".camel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# aShortSentence")]),s._v("\n")])])]),a("h3",{attrs:{id:"ceil"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ceil"}},[s._v("#")]),s._v(" ceil()")]),s._v(" "),a("p",[s._v("Converts a string to a number, and then rounds the\nnumber up to the closest integer.")]),s._v(" "),a("p",[s._v("The string must represent a number.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.3"')]),s._v(".ceil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 11")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-10.3"')]),s._v(".ceil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".ceil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: ceil(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),a("h3",{attrs:{id:"floor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#floor"}},[s._v("#")]),s._v(" floor()")]),s._v(" "),a("p",[s._v("Converts a string to a number, and then rounds the\nnumber down to the closest integer.")]),s._v(" "),a("p",[s._v("The string must represent a number.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.9"')]),s._v(".floor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-10.9"')]),s._v(".floor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -11")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".floor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: floor(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),a("h3",{attrs:{id:"fmt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fmt"}},[s._v("#")]),s._v(" fmt()")]),s._v(" "),a("p",[s._v("Formats a string ("),a("a",{attrs:{href:"https://linux.die.net/man/3/sprintf",target:"_blank",rel:"noopener noreferrer"}},[s._v("sprintf convention"),a("OutboundLink")],1),s._v("):")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello %s"')]),s._v(".fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "hello world"')]),s._v("\n")])])]),a("p",[s._v("In order to print a literal "),a("code",[s._v("%")]),s._v(", you can simply escape it with another "),a("code",[s._v("%%")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"30%%"')]),s._v(".fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 30%")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"30%% %s"')]),s._v(".fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"higher"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 30% higher")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"30%"')]),s._v(".fmt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 30%!(NOVERB)")]),s._v("\n")])])]),a("h3",{attrs:{id:"index-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#index-str"}},[s._v("#")]),s._v(" index(str)")]),s._v(" "),a("p",[s._v("Returns the first index at which "),a("code",[s._v("str")]),s._v(" is found:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ri"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2")]),s._v("\n")])])]),a("h3",{attrs:{id:"int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[s._v("#")]),s._v(" int()")]),s._v(" "),a("p",[s._v("Converts a string to a number, and then rounds it\ntowards zero to the closest integer.\nThe string must represent a number.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"99.5"')]),s._v(".int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 99")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-99.5"')]),s._v(".int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -99")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: int(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),a("h3",{attrs:{id:"is-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-number"}},[s._v("#")]),s._v(" is_number()")]),s._v(" "),a("p",[s._v("Checks whether a string can be converted to a number:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"99.5"')]),s._v(".is_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".is_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),a("p",[s._v("Use this function when "),a("code",[s._v('"...".number()')]),s._v(" might return an error.")]),s._v(" "),a("h3",{attrs:{id:"json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[s._v("#")]),s._v(" json()")]),s._v(" "),a("p",[s._v("Parses the string as JSON, returning a "),a("a",{attrs:{href:"/types/hash"}},[s._v("hash")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("⧐  s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{"a": 1, "b": "string", "c": true, "d": {"x": 10, "y": 20}}\'')]),s._v("\n⧐  h "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s.json"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n⧐  h\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("a: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(", b: string, c: true, d: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(", y: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n⧐  h.d\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(", y: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h3",{attrs:{id:"kebab"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kebab"}},[s._v("#")]),s._v(" kebab()")]),s._v(" "),a("p",[s._v("Converts the string to kebab-case:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a short sentence"')]),s._v(".snake"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a-short-sentence")]),s._v("\n")])])]),a("h3",{attrs:{id:"last-index-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#last-index-str"}},[s._v("#")]),s._v(" last_index(str)")]),s._v(" "),a("p",[s._v("Returns the last index at which "),a("code",[s._v("str")]),s._v(" is found:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string string"')]),s._v(".last_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"g"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 13")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string string"')]),s._v(".last_index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ri"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 9")]),s._v("\n")])])]),a("h3",{attrs:{id:"len"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#len"}},[s._v("#")]),s._v(" len()")]),s._v(" "),a("p",[s._v("Returns the length of a string:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v(".len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 11")]),s._v("\n")])])]),a("h3",{attrs:{id:"lines"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lines"}},[s._v("#")]),s._v(" lines()")]),s._v(" "),a("p",[s._v("Splits a string by newline:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('second"')]),s._v(".lines"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ["first", "second"]')]),s._v("\n")])])]),a("h3",{attrs:{id:"lower"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lower"}},[s._v("#")]),s._v(" lower()")]),s._v(" "),a("p",[s._v("Lowercases the string:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"STRING"')]),s._v(".lower"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "string"')]),s._v("\n")])])]),a("h3",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[s._v("#")]),s._v(" number()")]),s._v(" "),a("p",[s._v("Converts a string to a number, if possible:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"99.5"')]),s._v(".number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 99.5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: int(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),a("h3",{attrs:{id:"prefix-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prefix-str"}},[s._v("#")]),s._v(" prefix(str)")]),s._v(" "),a("p",[s._v("Checks whether the string starts with "),a("code",[s._v("str")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".prefix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".prefix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),a("h3",{attrs:{id:"repeat-i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repeat-i"}},[s._v("#")]),s._v(" repeat(i)")]),s._v(" "),a("p",[s._v("Creates a new string by repeating the original one "),a("code",[s._v("i")]),s._v(" times:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".repeat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "stringstring"')]),s._v("\n")])])]),a("h3",{attrs:{id:"replace-str1-str2-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replace-str1-str2-n"}},[s._v("#")]),s._v(" replace(str1, str2 [, n])")]),s._v(" "),a("p",[s._v("Replaces the first "),a("code",[s._v("n")]),s._v(" occurrences of "),a("code",[s._v("str1")]),s._v(" in the string with "),a("code",[s._v("str2")]),s._v(".\nIf "),a("code",[s._v("n")]),s._v(" is omitted or negative, it will replace all occurrences:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"o"')]),s._v(", -1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "strong"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaaa"')]),s._v(".replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "xxxx"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaaa"')]),s._v(".replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "xxaa"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A man, a plan, a canal, Panama!"')]),s._v(".replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a "')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ur-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "A man, ur-plan, ur-canal, Panama!"')]),s._v("\n")])])]),a("h3",{attrs:{id:"reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[s._v("#")]),s._v(" reverse()")]),s._v(" "),a("p",[s._v("Returns a new string with the order of characters/glyphs reversed from the\nsource.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v(".reverse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "dlrow olleh"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"世界"')]),s._v(".reverse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "界世"')]),s._v("\n")])])]),a("h3",{attrs:{id:"round-precision"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#round-precision"}},[s._v("#")]),s._v(" round(precision?)")]),s._v(" "),a("p",[s._v("Converts a string to a number, and then rounds\nthe number with the given precision.")]),s._v(" "),a("p",[s._v("The precision argument is optional, and set to "),a("code",[s._v("0")]),s._v("\nby default.")]),s._v(" "),a("p",[s._v("The string must represent a number.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.3"')]),s._v(".round"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 10")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.6"')]),s._v(".round"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 11")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.333"')]),s._v(".round"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 10.3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(".round"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ERROR: round(...) can only be called on strings which represent numbers, 'a' given")]),s._v("\n")])])]),a("p",[s._v("You can also replace an array of strings:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"i"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"g"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"o"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "strono"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A man, a plan, a canal, Panama!"')]),s._v(".replace"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a "')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"l"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ur-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "A man, ur-pur-an, ur-canaur-, Panama!"')]),s._v("\n")])])]),a("h3",{attrs:{id:"snake"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snake"}},[s._v("#")]),s._v(" snake()")]),s._v(" "),a("p",[s._v("Converts the string to snake_case:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a short sentence"')]),s._v(".snake"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a_short_sentence")]),s._v("\n")])])]),a("h3",{attrs:{id:"split-separator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#split-separator"}},[s._v("#")]),s._v(" split(separator)")]),s._v(" "),a("p",[s._v("Splits a string by "),a("code",[s._v("separator")]),s._v(", defaulting to a single space:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.2.3.4"')]),s._v(".split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ["1", "2", "3", "4"]')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1 2 3 4"')]),s._v(".split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# ["1", "2", "3", "4"]')]),s._v("\n")])])]),a("h3",{attrs:{id:"str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#str"}},[s._v("#")]),s._v(" str()")]),s._v(" "),a("p",[s._v("Identity:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "string"')]),s._v("\n")])])]),a("h3",{attrs:{id:"suffix-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#suffix-str"}},[s._v("#")]),s._v(" suffix(str)")]),s._v(" "),a("p",[s._v("Checks whether the string ends with "),a("code",[s._v("str")]),s._v(":")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".suffix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ing"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".suffix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ong"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),a("h3",{attrs:{id:"title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#title"}},[s._v("#")]),s._v(" title()")]),s._v(" "),a("p",[s._v("Titlecases the string:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),s._v(".title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "Hello World"')]),s._v("\n")])])]),a("h3",{attrs:{id:"trim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trim"}},[s._v("#")]),s._v(" trim()")]),s._v(" "),a("p",[s._v("Removes empty spaces from the beginning and end of the string:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" string     "')]),s._v(".trim"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "string"')]),s._v("\n")])])]),a("h3",{attrs:{id:"trim-by-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trim-by-str"}},[s._v("#")]),s._v(" trim_by(str)")]),s._v(" "),a("p",[s._v("Removes "),a("code",[s._v("str")]),s._v(" from the beginning and end of the string:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".trim_by"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"g"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "strin"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"stringest"')]),s._v(".trim_by"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"st"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "ringe"')]),s._v("\n")])])]),a("h3",{attrs:{id:"upper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#upper"}},[s._v("#")]),s._v(" upper()")]),s._v(" "),a("p",[s._v("Uppercases the string:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string"')]),s._v(".upper"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "STRING"')]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{495:function(t,n,a){"use strict";a.r(n);var s=a(25),e=Object(s.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"decorator"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decorator"}},[t._v("#")]),t._v(" Decorator")]),t._v(" "),n("p",[t._v("Decorators are a feature built on top of\nABS' functions -- they're not a type "),n("em",[t._v("per se")]),t._v("\nbut they do have their own "),n("em",[t._v("syntactic sugar")]),t._v(".")]),t._v(" "),n("p",[t._v("A decorator is a function that \"wraps\" another\nfunction, allowing you to enhance the original\nfunction's functionality with the decorator's\none.")]),t._v(" "),n("p",[t._v("An example could be a decorator that logs how\nlong a function takes to execute, or delays\nexecution altogether.")]),t._v(" "),n("h2",{attrs:{id:"simple-decorators"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#simple-decorators"}},[t._v("#")]),t._v(" Simple decorators")]),t._v(" "),n("p",[t._v('A decorator is a plain-old function that\naccepts the original function and returns a new\nfunction that wraps the original one with its\nown behaviour. After defining it, you can\n"decorate" other functions through the convenient\n'),n("code",[t._v("@")]),t._v(" syntax:")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[t._v("f uppercase"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("upper"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@uppercase")]),t._v("\nf stringer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nstringer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "{}"')]),t._v("\nstringer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "12"')]),t._v("\nstringer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "HELLO"')]),t._v("\n")])])]),n("p",[t._v("As you see, "),n("code",[t._v("stringer")]),t._v("'s behaviour has been altered:\nit will now output uppercase strings.")]),t._v(" "),n("h2",{attrs:{id:"decorators-with-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#decorators-with-arguments"}},[t._v("#")]),t._v(" Decorators with arguments")]),t._v(" "),n("p",[t._v('As we\'ve just seen, a decorator simply needs to\nbe a function that accepts the original\nfunction and returns a new one, "enhancing"\nthe original behavior. If you wish to\nconfigure decorators with arguments, it\nis as simple as adding another level\nof "wrapping":')]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[t._v("f log_if_slow"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("treshold_ms"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("original_fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" f"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            start "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" `date "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("s"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("3N`"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            res "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" original_fn"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            end "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" `date "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("s"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("3N`"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" end "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" start "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" treshold_ms "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                echo"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mmm, we were pretty slow..."')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("That's as simple as that: a named function\nthat returns a new function that executes the\ndecorated one ("),n("code",[t._v("original_fn")]),t._v(") and returns its\nresult, while logging if it takes longer than\na few milliseconds.")]),t._v(" "),n("p",[t._v("Now that we've declared our decorator, it's time\nto use it, through the "),n("code",[t._v("@")]),t._v(" notation:")]),t._v(" "),n("div",{staticClass:"language-py extra-class"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@log_if_slow")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nf return_random_number_after_sleeping"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seconds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    `sleep $seconds`\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" rand"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("and we can test our decorator has taken the stage:")]),t._v(" "),n("div",{staticClass:"language-console extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("⧐  return_random_number_after_sleeping(0)\n493\n⧐  return_random_number_after_sleeping(1)\nmmm, we were pretty slow...\n371\n")])])]),n("p",[t._v("Decorators are heavily inspired by "),n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0318/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python"),n("OutboundLink")],1),t._v(" -- if you wish to understand\nhow they work more in depth we'd recommend reading this "),n("a",{attrs:{href:"https://realpython.com/primer-on-python-decorators",target:"_blank",rel:"noopener noreferrer"}},[t._v("primer on Python decorators"),n("OutboundLink")],1),t._v(".")])])}),[],!1,null,null,null);n.default=e.exports}}]);
# Platforms commented out seem
# to be a PITA to compile without
# too much tooling, we'll have a 
# look at those later on.
#
# "linux/mips"
#"linux/mipsle"
# "linux/mips64"
# "linux/mips64le"
# "darwin/arm"
# "plan9/386"
# "plan9/amd64"
# "openbsd/386"
# "openbsd/amd64"
# "openbsd/arm"
# "dragonfly/amd64"
# "android/arm"
# "solaris/amd64"

# freebsd and netbsd can be easily
# built, but we opt to keep them
# out as the userbase doesn't seem
# to be there.
#
# "freebsd/386",
# "freebsd/amd64",
# "freebsd/arm",
# "netbsd/386",
# "netbsd/amd64",
# "netbsd/arm"
#
# dropped by Go
# "darwin/386",

platforms = [
    "linux/386",
    "linux/amd64",
    "linux/arm",
    "linux/arm64",
    "linux/ppc64",
    "linux/ppc64le",
    "linux/arm",
    "linux/arm64",
    "windows/amd64",
    "windows/386",
    "darwin/amd64",
    "js/wasm"
]

echo("Deleting previous builds...")
rm = `rm -rf builds/abs-*`

if !rm.ok {
    return echo("error: " + rm)
}

version = `cat VERSION`
echo("Running builds for version '$version', confirm by typing \"y\"")
selection = stdin()

if selection != "y" {
    exit(2)
}

`go-bindata -o evaluator/stdlib.go -pkg evaluator stdlib/...`

tests = `make test`
echo(tests)

if !tests.ok {
    exit(1, "Tests failing")
}

for platform in platforms {
    goos, goarch = platform.split("/")
    output_name = "builds/abs-$goos-$goarch"
    entry_point = "main.go"

    if goos == "windows" {
        output_name = output_name + ".exe"
    }

    if goos == "js" {
        output_name = "docs/src/.vuepress/public/abs.wasm"
        entry_point = "js/js.go"
    }

    echo("Building %s %s", goos, goarch)
    build = `GOOS=$goos GOARCH=$goarch go build -ldflags="-s -w -X 'main.Version=$version'" -o $output_name $entry_point`

    if !build.ok {
        exit(1, "error: " + build)
    }
}

echo("building docs")
docs = `make build_docs`

if !docs.ok {
    exit(1, docs)
}

echo("done")

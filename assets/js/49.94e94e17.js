(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{496:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"builtin-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#builtin-function"}},[t._v("#")]),t._v(" Builtin function")]),t._v(" "),s("p",[t._v("There are many builtin functions in ABS.\nTake "),s("code",[t._v("type")]),t._v(", for example:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# NUMBER")]),t._v("\ntype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ARRAY")]),t._v("\n")])])]),s("p",[t._v('We\'ll reveal to you a secret now: all string, array, number & hash functions\nare actually "generic", but the syntax you see makes you think those are\nspecific to the string, number, etc object.')]),t._v(" "),s("p",[t._v("The trick is very simple; whenever the ABS' interpreter finds a method call\nsuch as "),s("code",[t._v("object.func(arg)")]),t._v(" it will actually translate it to "),s("code",[t._v("func(object, arg)")]),t._v(".")]),t._v(" "),s("p",[t._v("Don't believe us? Try with these examples:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(", int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1]")]),t._v("\nsort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [1, 2, 3]")]),t._v("\nlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n")])])]),s("p",[t._v("At the same time, there are some builtin functions that doesn't really\nmake sense to call with the method notation, so we've kept them in a\n\"special\" location in the documentation. "),s("code",[t._v("exit(99)")]),t._v(", for example, exits\nthe program with the status code "),s("code",[t._v("99")]),t._v(", but it would definitely look\nstrange to see something such as "),s("code",[t._v("99.exit()")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"generic-builtin-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#generic-builtin-functions"}},[t._v("#")]),t._v(" Generic builtin functions")]),t._v(" "),s("h3",{attrs:{id:"arg-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#arg-n"}},[t._v("#")]),t._v(" arg(n)")]),t._v(" "),s("p",[t._v("Returns the "),s("code",[t._v("n")]),t._v("th argument to the current script:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /usr/bin/abs")]),t._v("\n")])])]),s("h3",{attrs:{id:"args"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#args"}},[t._v("#")]),t._v(" args()")]),t._v(" "),s("p",[t._v("Returns the list of arguments to the current script (including the current script itself)")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ abs "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--flag1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--flag2")]),t._v(" arg1 arg2\nHello user, welcome to the ABS programming language"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\nType "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'quit'")]),t._v(" when you"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'re done, '")]),t._v("help' "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" you get lost"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n⧐   args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abs"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--flag1"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--flag2"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arg1"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"arg2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n⧐   args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),s("h3",{attrs:{id:"cd-or-cd-path"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cd-or-cd-path"}},[t._v("#")]),t._v(" cd() or cd(path)")]),t._v(" "),s("p",[t._v("Sets the current working directory to "),s("code",[t._v("homeDir")]),t._v(" or the given "),s("code",[t._v("path")]),t._v("\nin both Linux and Windows.")]),t._v(" "),s("p",[t._v("Note that the path may have a "),s("code",[t._v("'~/'")]),t._v(" prefix which will be replaced\nwith "),s("code",[t._v("'homeDir/'")]),t._v(". Also, in Windows, any "),s("code",[t._v("'/'")]),t._v(" path separator will be\nreplaced with "),s("code",[t._v("'\\'")]),t._v(" and path names are not case-sensitive.")]),t._v(" "),s("p",[t._v("Returns the "),s("code",[t._v("'/fully/expanded/path'")]),t._v(" to the new current working directory and "),s("code",[t._v("path.ok")]),t._v(".\nIf "),s("code",[t._v("path.ok")]),t._v(" is "),s("code",[t._v("false")]),t._v(", that means there was an error changing directory:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("path "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npath.ok     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# true")]),t._v("\npath        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /home/user or C:\\Users\\user")]),t._v("\n\nhere "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pwd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npath "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/path/to/nowhere"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npath.ok         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# false")]),t._v("\npath            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 'chdir /path/to/nowhere: no such file or directory'")]),t._v("\nhere "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" pwd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# true")]),t._v("\n\ncd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~/git/abs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /home/user/git/abs or C:\\Users\\user\\git\\abs")]),t._v("\n\ncd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /home/user/git or C:\\Users\\user\\git")]),t._v("\n\ncd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/local/bin"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /usr/local/bin")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dirs")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" /"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(".lines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nlen"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dirs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# number of directories in homeDir")]),t._v("\n")])])]),s("h3",{attrs:{id:"echo-var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#echo-var"}},[t._v("#")]),t._v(" echo(var)")]),t._v(" "),s("p",[t._v("Prints the given variable:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("You can use use placeholders in your strings:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello %s"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("To know more about how the placeholders work, please have a look at the documentation\nfor "),s("RouterLink",{attrs:{to:"/types/string/#fmt"}},[t._v("string.fmt()")])],1),t._v(" "),s("h3",{attrs:{id:"env-str"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#env-str"}},[t._v("#")]),t._v(" env(str)")]),t._v(" "),s("p",[t._v("Returns the "),s("code",[t._v("str")]),t._v(" environment variable:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PATH"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"')]),t._v("\n")])])]),s("h3",{attrs:{id:"eval-str"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#eval-str"}},[t._v("#")]),t._v(" eval(str)")]),t._v(" "),s("p",[t._v("Evaluates the "),s("code",[t._v("str")]),t._v(" as ABS code:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("eval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1 + 1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2")]),t._v("\neval"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object = {\"x\": 10}; object.x'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 10")]),t._v("\n")])])]),s("h3",{attrs:{id:"exit-code-message"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exit-code-message"}},[t._v("#")]),t._v(" exit(code [, message])")]),t._v(" "),s("p",[t._v("Exits the script with status "),s("code",[t._v("code")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("exit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("You can specify a message that's going to be outputted right\nbefore exiting:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("⧐  exit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Got problems..."')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nGot problems"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),s("h3",{attrs:{id:"flag-str"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#flag-str"}},[t._v("#")]),t._v(" flag(str)")]),t._v(" "),s("p",[t._v("Returns the value of a command-line flag. Both the "),s("code",[t._v("--flag")]),t._v(" and "),s("code",[t._v("-flag")]),t._v("\nform are accepted, and you can specify values with "),s("code",[t._v("--flag=x")]),t._v("\nas well as "),s("code",[t._v("--flag x")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ abs "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--test")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--test2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--test3")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--test4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-test5")]),t._v("\nHello user, welcome to the ABS programming language"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\nType "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'quit'")]),t._v(" when you"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'re done, '")]),t._v("help' "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" you get lost"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n⧐  flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n⧐  flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n⧐  flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n⧐  flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test4"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n⧐  flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test5"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n⧐  flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test6"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n⧐\n")])])]),s("p",[t._v("If a flag value is not set, it will default to "),s("code",[t._v("true")]),t._v(".\nThe value of a flag that does not exist is "),s("code",[t._v("NULL")]),t._v(".")]),t._v(" "),s("p",[t._v("In all other cases "),s("code",[t._v("flag(...)")]),t._v(" returns the literal string\nvalue of the flag:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ abs "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--number")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\nHello user, welcome to the ABS programming language"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\nType "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'quit'")]),t._v(" when you"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'re done, '")]),t._v("help' "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" you get lost"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n⧐  n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" flag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n⧐  n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n⧐  type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nSTRING\n")])])]),s("h3",{attrs:{id:"pwd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pwd"}},[t._v("#")]),t._v(" pwd()")]),t._v(" "),s("p",[t._v("Returns the path to the current working directory -- equivalent\nto "),s("code",[t._v('env("PWD")')]),t._v(".")]),t._v(" "),s("p",[t._v("If executed from a script this will initially be the directory\ncontaining the script.")]),t._v(" "),s("p",[t._v("To change the working directory, see "),s("code",[t._v("cd()")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("pwd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /go/src/github.com/abs-lang/abs")]),t._v("\n")])])]),s("h3",{attrs:{id:"rand-max"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rand-max"}},[t._v("#")]),t._v(" rand(max)")]),t._v(" "),s("p",[t._v("Returns a random integer number between 0 and "),s("code",[t._v("max")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("rand"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 7")]),t._v("\n")])])]),s("h3",{attrs:{id:"require-path-to-file-abs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#require-path-to-file-abs"}},[t._v("#")]),t._v(" require(path_to_file.abs)")]),t._v(" "),s("p",[t._v("Evaluates the script at "),s("code",[t._v("path_to_file.abs")]),t._v(", and makes\nits return value available to the caller.")]),t._v(" "),s("p",[t._v("For example, suppose we have a "),s("code",[t._v("module.abs")]),t._v(" file:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("adder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a, b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a + b "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmultiplier "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a, b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a * b "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"adder"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" adder, "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"multiplier"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" multiplier"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("and a "),s("code",[t._v("main.abs")]),t._v(" such as:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("mod "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" require"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module.abs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\necho"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mod.adder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 3")]),t._v("\n")])])]),s("p",[t._v("This is mostly useful to create external library\nfunctions, like NPM modules or PIP packages, that\ndo not have access to the global environment. Any\nvariable set outside of the module will not be\navailable inside it, and vice-versa. The only\nvariable available to the caller (the script requiring\nthe module) is the module's return value.")]),t._v(" "),s("p",[t._v("Note that "),s("code",[t._v("require")]),t._v(" uses paths that are relative to\nthe current script. Say that you have 2 files ("),s("code",[t._v("a.abs")]),t._v(" and "),s("code",[t._v("b.abs")]),t._v(")\nin the "),s("code",[t._v("/tmp")]),t._v(" folder, "),s("code",[t._v("a.abs")]),t._v(" can "),s("code",[t._v('require("./b.abs")')]),t._v("\nwithout having to specify the full path (eg. "),s("code",[t._v('require("/tmp/b.abs")')]),t._v(").")]),t._v(" "),s("h3",{attrs:{id:"sleep-ms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sleep-ms"}},[t._v("#")]),t._v(" sleep(ms)")]),t._v(" "),s("p",[t._v("Halts the process for as many "),s("code",[t._v("ms")]),t._v(" you specified:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("sleep"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# sleeps for 1 second")]),t._v("\n")])])]),s("h3",{attrs:{id:"source-path-to-file-abs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#source-path-to-file-abs"}},[t._v("#")]),t._v(" source(path_to_file.abs)")]),t._v(" "),s("p",[t._v("Evaluates the script at "),s("code",[t._v("path_to_file.abs")]),t._v(" in the context of the\nABS global environment. The results of any expressions in the file\nbecome available to other commands in the REPL command line or to other\nscripts in the current script execution chain.")]),t._v(" "),s("p",[t._v("This is very similar to "),s("code",[t._v("require")]),t._v(", but allows the module to access\nand edit the global environment. Any variable set inside the module\nwill also be available outside of it.")]),t._v(" "),s("p",[t._v("This is most useful for creating library functions in a startup script,\nor variables that can be used by many other scripts. Often these library functions\nare loaded via the ABS Init File "),s("code",[t._v("~/.absrc")]),t._v(" (see "),s("a",{attrs:{href:"/introduction/how-to-run-abs-code"}},[t._v("ABS Init File")]),t._v(").")]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" ~/abs/lib/library.abs\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Useful function library ~/abs/lib/library.abs")]),t._v("\nadder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n, i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" n + i "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" ~/.absrc\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ABS init file ~/.absrc")]),t._v("\nsource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~/abs/lib/library.abs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n$ abs\nHello user, welcome to the ABS programming language"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\nType "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'quit'")]),t._v(" when you are done, "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'help'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" you get lost"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("\n⧐ adder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n⧐\n")])])]),s("p",[t._v("In addition to source file inclusion in scripts, you can also use\n"),s("code",[t._v("source()")]),t._v(" in the interactive REPL to load a script being\ndebugged. When the loaded script completes, the REPL command line\nwill have access to all variables and functions evaluated in the\nscript.")]),t._v(" "),s("p",[t._v("For example:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("⧐  source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~/git/abs/tests/test-strings.abs"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Testing "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),t._v(" and "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),t._v(" strings with expanded LFs:\ns "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" split"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('c"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\necho"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a, b, c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n⧐  s\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a, b, c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n⧐\n")])])]),s("p",[t._v("Note well that nested source files must not create a circular\ninclusion condition. You can configure the intended source file\ninclusion depth using the "),s("code",[t._v("ABS_SOURCE_DEPTH")]),t._v(" OS or ABS environment\nvariables. The default is "),s("code",[t._v("ABS_SOURCE_DEPTH=10")]),t._v(". This will prevent\na panic in the ABS interpreter if there is an unintended circular\nsource inclusion.")]),t._v(" "),s("p",[t._v("For example an ABS Init File may contain:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("ABS_SOURCE_DEPTH "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\nsource"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"~/path/to/abs/lib"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("This will limit the source inclusion depth to 15 levels for this\n"),s("code",[t._v("source()")]),t._v(" statement and will also apply to future "),s("code",[t._v("source()")]),t._v("\nstatements until changed.")]),t._v(" "),s("h3",{attrs:{id:"stdin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stdin"}},[t._v("#")]),t._v(" stdin()")]),t._v(" "),s("p",[t._v("Reads from the "),s("code",[t._v("stdin")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"What do you like?"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\necho"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Oh, you like %s!"')]),t._v(", stdin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This line will block until user enters some text")]),t._v("\n")])])]),s("p",[t._v("Worth to note that you can read\nthe "),s("code",[t._v("stdin")]),t._v(" indefinitely with:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Will read all input to the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stdin and output it back")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" stdin "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Or from the REPL:")]),t._v("\n\n⧐  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" stdin "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" echo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("((")]),t._v("input.int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" / "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(".str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" + "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"...try again:"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".try again:\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".try again:\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),s("h3",{attrs:{id:"type-var"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-var"}},[t._v("#")]),t._v(" type(var)")]),t._v(" "),s("p",[t._v("Returns the type if the given variable:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "STRING"')]),t._v("\ntype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# "HASH"')]),t._v("\n")])])]),s("h3",{attrs:{id:"unix-ms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unix-ms"}},[t._v("#")]),t._v(" unix_ms()")]),t._v(" "),s("p",[t._v("Returns the current unix epoch time, in milliseconds:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("unix_ms"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1594049453157")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);